{"version":3,"sources":["Sudoku/SudokuCell.js","Sudoku/SudokuSolver.js","Sudoku/SudokuBoard.js","App.js","serviceWorker.js","index.js"],"names":["SudokuBoard","_this","this","cell","candidates","props","value","push","react_default","a","createElement","key","className","onClick","_loop","candidate","i","indexOf","removedCandidates","includes","onContextMenu","e","preventDefault","length","Component","getCandidates","sudoku","x","y","Object","toConsumableArray","setIntersection","rule1","getRowIndex","getColumnIndex","getSquareIndex","getEmptyRemovedcandidates","Array","apply","map","getEmptySudoku","copySudoku","row","slice","setUnion","set1","set2","Set","concat","setDifference","filter","has","_","xr","Math","floor","yr","getAllGroup","r","c","groupCoordinates","xy","rule2","candidateGrid","otherCandidates","reduce","acc","cur","rule4","squareCoordinates","removeCoordValues","squareCandidates","groupCandidates","intersectingCandidates","removeCandidates","_arr","_loop2","_i","searchCandidates","removeCoordinates","searchCoordinates","complementCandidates","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","undefined","_step4","_loop3","removeCoords","removeCoordinate","toString","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","Symbol","iterator","next","done","err","return","_iterator4","applyRule2","rIndex","cellCandidates","cIndex","newCellCandidates","size","applyRule3","_ref","newCandidateGrid","removeSubsets","groupIndex","unFilledCellCoordinates","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_xy","_cellCandidates","subsetCoordinates","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","coord","__xy","_iterator","rule3","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","removeSubset","removeSet","applyRule4","squareGroupAnchors","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","squareGroup","groupFunctions","j","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","removeCoordValue","countCandidates","solveOnce","getCandidateGrid","candidateCount","newSudoku","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","puzzleEasy","puzzleMedium","puzzleHard","puzzleEvil","puzzleMultiple","puzzle","puzzleReset","column","newPuzzle","setState","newRemovedCandidates","val","solve","group","console","log","_this2","arguments","Sudoku_SudokuCell","changeCell","changeRemoveCandidates","_this3","puzzles","puzzleInfo","Table","Row","Cell","index","changePuzzle","celled","Body","_this4","rows","cells","originalCellValue","renderSudokuCell","renderSolved","resetPuzzle","clearPuzzle","printPuzzle","renderPuzzleList","App","Container","src_Sudoku_SudokuBoard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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E,EAAE,IAClL,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAClL,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAClL,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAClL,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAClL,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAClL,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAClL,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAClL,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,KAEtLC,aAAc,CACV,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAClL,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAClL,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAClL,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAClL,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAClL,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAClL,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAClL,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAClL,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAClL,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,KAEtLC,WAAY,CACR,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAClL,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAClL,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAClL,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAClL,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAClL,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAClL,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAClL,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAClL,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAClL,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,KAEtLC,WAAY,CACR,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAClL,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAClL,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAClL,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAClL,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAClL,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAClL,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAClL,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAClL,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAA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","file":"static/js/main.e940f0a4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './SudokuCell.css';\r\n\r\nclass SudokuBoard extends Component {\r\n    render() {\r\n        var cell = [];\r\n        var candidates = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n        if (this.props.value !== 0) {\r\n            cell.push(<button key='value' className='value' onClick={() => this.props.onClick(0)}>{this.props.value}</button>);\r\n        } else {\r\n            for (var i = 0; i < candidates.length; i++) {\r\n                const candidate = candidates[i];\r\n                if (this.props.candidates.indexOf(candidate) !== -1){\r\n                    if (this.props.removedCandidates.includes(candidate)){\r\n                            cell.push(\r\n                                <button key={'candidate-'+ candidate} className='candidate removed'\r\n                                    onContextMenu={(e) => {this.props.onContextMenu(candidate); e.preventDefault();}}\r\n                                    onClick={() => this.props.onClick(candidate)}>\r\n                                    {candidate}\r\n                                </button>);\r\n                    } else {\r\n                        cell.push(\r\n                            <button key={'candidate-'+ candidate} className='candidate'\r\n                                onContextMenu={(e) => {this.props.onContextMenu(candidate); e.preventDefault();}}\r\n                                onClick={() => this.props.onClick(candidate)}>\r\n                                {candidate}\r\n                            </button>);\r\n                    }\r\n                } else {\r\n                    cell.push(<button key={'candidate-'+ candidate} className='placeholder'></button>);\r\n                }\r\n            }\r\n        }\r\n        return (\r\n            <div className='wrapper'>\r\n                {cell}\r\n            </div>\r\n        );\r\n  }\r\n}\r\n\r\nexport default SudokuBoard;\r\n","export function getCandidates(sudoku, x, y) {\r\n    return [...setIntersection(\r\n        setIntersection(\r\n            rule1(sudoku, getRowIndex(x)),\r\n            rule1(sudoku, getColumnIndex(y))\r\n        ),\r\n        rule1(sudoku, getSquareIndex(x, y))\r\n    )];\r\n}\r\n\r\n\r\nexport function getEmptyRemovedcandidates(){\r\n    return Array.apply(null, Array(9)).map(() => Array.apply(null, Array(9)).map(() => []))\r\n}\r\n\r\nexport function getEmptySudoku() {\r\n    return Array.apply(null, Array(9)).map(() => Array.apply(null, Array(9)).map(() => 0))\r\n}\r\n\r\nexport function copySudoku(sudoku) {\r\n    return sudoku.map((row) => row.slice());\r\n}\r\n\r\nfunction setUnion(set1, set2) {\r\n    return new Set([...set1, ...set2]);\r\n};\r\n\r\nfunction setDifference(set1, set2) {\r\n    return new Set([...set1].filter(x => !set2.has(x)));\r\n};\r\n\r\nfunction setIntersection(set1, set2) {\r\n    return new Set([...set1].filter(x => set2.has(x)));\r\n};\r\n\r\n// function setIsEqual(set1, set2){\r\n//     return set1.size === set2.size ? set1.size === setUnion(set1, set2).size : false;\r\n// };\r\n\r\nfunction setIsSuperset(set1, set2){\r\n    return set1.size === setUnion(set1, set2).size;\r\n};\r\n\r\nfunction getRowIndex(x){\r\n    return Array.apply(null, Array(9)).map((_, i) => [x, i]);\r\n}\r\n\r\nfunction getColumnIndex(y){\r\n    return Array.apply(null, Array(9)).map((_, i) => [i, y]);\r\n}\r\n\r\nfunction getSquareIndex(x, y){\r\n    const xr = Math.floor(x/3) * 3;\r\n    const yr = Math.floor(y/3) * 3;\r\n    return Array.apply(null, Array(9)).map((_, i) => [xr + Math.floor(i/3), yr + (i%3)]);\r\n}\r\n\r\nfunction getAllGroup(){\r\n    return [].concat(\r\n        [0,1,2,3,4,5,6,7,8].map((r) => getRowIndex(r)),\r\n        [0,1,2,3,4,5,6,7,8].map((c) => getColumnIndex(c)),\r\n        [0,1,2,3,4,5,6,7,8].map((i) => getSquareIndex(Math.floor(i/3)*3, (i%3)*3)),\r\n    );\r\n}\r\n\r\nfunction rule1(sudoku, groupCoordinates){\r\n    return setDifference(new Set([1,2,3,4,5,6,7,8,9]), new Set(groupCoordinates.map((xy) => sudoku[xy[0]][xy[1]])));\r\n}\r\n\r\nfunction rule2(candidateGrid, groupCoordinates, x, y){\r\n    const otherCandidates = groupCoordinates.filter((xy) => xy[0] !== x || xy[1] !== y)\r\n                                      .map((xy) => new Set(candidateGrid[xy[0]][xy[1]]))\r\n                                      .reduce((acc, cur) => setUnion(acc, cur));\r\n    return setDifference(candidateGrid[x][y], otherCandidates)}\r\n\r\nfunction rule3(candidateGrid, groupCoordinates){\r\n    const removeCoordValues = [];\r\n    const unFilledCellCoordinates = groupCoordinates.filter((xy) => candidateGrid[xy[0]][xy[1]].size !== 0)\r\n    for(var _xy of unFilledCellCoordinates){\r\n        const _cellCandidates = candidateGrid[_xy[0]][_xy[1]];\r\n        const subsetCoordinates = [_xy];\r\n        if (_cellCandidates.size){\r\n            for(var xy of unFilledCellCoordinates) {\r\n                const cellCandidates = candidateGrid[xy[0]][xy[1]];\r\n                if(_xy !== xy && cellCandidates.size){\r\n                    if (setIsSuperset(_cellCandidates, cellCandidates)){\r\n                        subsetCoordinates.push(xy);\r\n                    }\r\n                }\r\n            }\r\n            if (subsetCoordinates.length === _cellCandidates.size){\r\n                for (let __xy of unFilledCellCoordinates.filter(coord => !subsetCoordinates.includes(coord))){\r\n                    removeCoordValues.push([__xy, new Set([..._cellCandidates])])\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return removeCoordValues;\r\n}\r\n\r\nfunction rule4(candidateGrid, squareCoordinates, groupCoordinates){\r\n    const removeCoordValues = [];\r\n    const squareCandidates = squareCoordinates.map(xy => candidateGrid[xy[0]][xy[1]]);\r\n    const groupCandidates = groupCoordinates.map(xy => candidateGrid[xy[0]][xy[1]]);\r\n    const intersectingCandidates = setIntersection(new Set(squareCandidates), new Set(groupCandidates));\r\n    const removeCandidates = [...[...intersectingCandidates].reduce((acc, cur) => setUnion(acc, cur))];\r\n    for (let _ of [[squareCandidates, groupCoordinates, squareCoordinates],\r\n                   [groupCandidates, squareCoordinates, groupCoordinates]]) {\r\n        const searchCandidates = _[0];\r\n        const removeCoordinates = _[1];\r\n        const searchCoordinates = _[2];\r\n        const complementCandidates = [...setDifference(searchCandidates, intersectingCandidates)];\r\n        for (let value of removeCandidates){\r\n            const remove = complementCandidates.map(candidates => !candidates.has(value)).reduce((acc, cur) => acc && cur);\r\n            if (remove){\r\n                const removeCoords = removeCoordinates.filter(removeCoordinate => searchCoordinates.map(xy => removeCoordinate.toString() !== xy.toString())\r\n                                                                                                   .reduce((acc, cur)=> acc && cur));\r\n                for (let xy of removeCoords){\r\n                    removeCoordValues.push([xy, new Set([value])]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return removeCoordValues;\r\n}\r\n\r\nfunction getCandidateGrid(sudoku){\r\n    return sudoku.map(\r\n        (row, rIndex) => row.map(\r\n            (cell, cIndex) => {\r\n                return cell === 0 ? new Set(getCandidates(sudoku, rIndex, cIndex)) : new Set([]);\r\n            }\r\n        )\r\n    )\r\n}\r\n\r\nfunction applyRule2(candidateGrid){\r\n    const newCandidateGrid = candidateGrid.map(\r\n        (row, rIndex) => row.map(\r\n            (cellCandidates, cIndex) => {\r\n                const newCellCandidates = setUnion(\r\n                    setUnion(\r\n                        rule2(candidateGrid, getRowIndex(rIndex), rIndex, cIndex),\r\n                        rule2(candidateGrid, getColumnIndex(cIndex), rIndex, cIndex)\r\n                    ),\r\n                    rule2(candidateGrid, getSquareIndex(rIndex, cIndex), rIndex, cIndex)\r\n                );\r\n                return newCellCandidates.size === 1 ? new Set(newCellCandidates) : new Set(cellCandidates);\r\n            }\r\n        )\r\n    );\r\n    return newCandidateGrid;\r\n}\r\n\r\nfunction applyRule3(candidateGrid){\r\n    const newCandidateGrid = candidateGrid.map(row => row.map(candidates => new Set(candidates)));\r\n    const removeSubsets = [].concat(...getAllGroup().map(groupIndex => rule3(candidateGrid, groupIndex)));\r\n    for(var removeSubset of removeSubsets){\r\n        const xy = removeSubset[0];\r\n        const removeSet = removeSubset[1];\r\n        newCandidateGrid[xy[0]][xy[1]] = setDifference(newCandidateGrid[xy[0]][xy[1]], removeSet);\r\n    }\r\n    return newCandidateGrid;\r\n}\r\n\r\nfunction applyRule4(candidateGrid){\r\n    const newCandidateGrid = candidateGrid.map(row => row.map(candidates => new Set(candidates)));\r\n    const squareGroupAnchors = [0,1,2,3,4,5,6,7,8].map(i => [Math.floor(i/3)*3, (i%3)*3])\r\n    for (let xy of squareGroupAnchors){\r\n        const squareGroup = getSquareIndex(xy[0], xy[1]);\r\n        const groupFunctions = [getRowIndex, getColumnIndex]\r\n        for(var i = 0; i < xy.length; i++){\r\n            for(var j = 0; j < 3; j++){\r\n                const group = groupFunctions[i](xy[i]+ j);\r\n                const removeCoordValues = rule4(candidateGrid, squareGroup, group);\r\n                for (let removeCoordValue of removeCoordValues){\r\n                    const r = removeCoordValue[0][0];\r\n                    const c = removeCoordValue[0][1];\r\n                    const value = removeCoordValue[1];\r\n                    newCandidateGrid[r][c] = setDifference(newCandidateGrid[r][c], value)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return newCandidateGrid;\r\n}\r\n\r\nfunction countCandidates(candidateGrid){\r\n    return candidateGrid.map(candidates => candidates.map(candidate => candidate.size)\r\n                                                     .reduce((acc, cur) => acc + cur))\r\n                        .reduce((acc, cur) => acc + cur)\r\n}\r\n\r\nexport function isSolved(sudoku){\r\n    return getAllGroup().map(groupIndex => {\r\n        const group = groupIndex.map(xy => sudoku[xy[0]][xy[1]]);\r\n        const solved = new Set(group).size === 9 && setUnion(new Set([1,2,3,4,5,6,7,8,9]), new Set(group)).size === 9;\r\n        return solved;\r\n    }).reduce((acc, cur)=> acc && cur);\r\n}\r\n\r\nexport function solveOnce(sudoku) {\r\n    let candidateGrid = getCandidateGrid(sudoku)\r\n    let candidateCount = 0;\r\n    while (candidateCount !== countCandidates(candidateGrid)) {\r\n        candidateCount = countCandidates(candidateGrid);\r\n        candidateGrid = applyRule2(candidateGrid);\r\n        candidateGrid = applyRule3(candidateGrid);\r\n        candidateGrid = applyRule4(candidateGrid);\r\n    }\r\n\r\n\r\n    const newSudoku = sudoku.map((row) => row.slice());\r\n    for (let r = 0; r < 9; r++){\r\n        for (let c = 0; c < 9; c++) {\r\n            const candidate = candidateGrid[r][c];\r\n            if (candidate.size === 1) {\r\n                newSudoku[r][c] = [...candidate][0];\r\n                candidateGrid[r][c] = new Set([]);\r\n            }\r\n        }\r\n    }\r\n    return {'sudoku': newSudoku, 'candidateGrid': candidateGrid};\r\n}","import React, { Component } from 'react';\r\nimport SudokuCell from \"./SudokuCell\";\r\nimport {getCandidates, solveOnce, getEmptySudoku, copySudoku, isSolved, getEmptyRemovedcandidates} from \"./SudokuSolver\"\r\nimport './SudokuBoard.css';\r\n\r\nimport { Table } from 'semantic-ui-react'\r\n\r\n\r\nclass SudokuBoard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            puzzleEasy: [\r\n                [[7,8,0,0,1,0,6,5,0],[0,0,0,0,0,0,4,0,0],[0,3,4,0,0,5,0,0,8],[9,0,0,0,3,4,0,8,1],[6,0,3,0,0,0,9,0,5],[4,1,0,7,5,0,0,0,3],[8,0,0,3,0,0,5,2,0],[0,0,7,0,0,0,0,0,0],[0,9,5,0,7,0,0,1,4]],\r\n                [[7,0,6,3,2,0,9,0,0],[0,1,0,0,7,0,0,0,4],[0,0,4,0,0,0,7,8,2],[4,0,0,7,5,1,0,0,0],[0,0,1,9,0,2,4,0,0],[0,0,0,4,8,3,0,0,7],[9,2,3,0,0,0,8,0,0],[8,0,0,0,3,0,0,4,0],[0,0,7,0,9,5,6,0,3]],\r\n                [[9,0,0,0,7,1,0,2,0],[2,0,8,0,0,4,0,7,0],[0,0,3,0,0,0,5,8,0],[0,4,5,0,3,2,1,6,9],[0,0,0,0,0,0,0,0,0],[3,7,6,1,8,0,4,5,0],[0,2,1,0,0,0,7,0,0],[0,3,0,5,0,0,6,0,8],[0,8,0,4,1,0,0,0,5]],\r\n                [[7,0,1,0,8,0,0,0,4],[0,0,0,0,0,0,0,0,7],[8,0,0,0,9,5,2,0,6],[9,0,0,6,3,0,1,8,5],[0,1,0,2,0,7,0,4,0],[5,4,3,0,1,8,0,0,2],[1,0,2,4,7,0,0,0,8],[3,0,0,0,0,0,0,0,0],[4,0,0,0,2,0,3,0,1]],\r\n                [[7,5,0,0,8,0,0,0,2],[0,1,6,9,0,7,4,5,0],[3,2,0,1,0,0,0,6,0],[0,0,8,0,0,1,2,0,0],[0,6,0,0,0,0,0,8,0],[0,0,7,2,0,0,3,0,0],[0,7,0,0,0,2,0,3,4],[0,4,5,7,0,3,8,2,0],[2,0,0,0,9,0,0,7,5]],\r\n                [[5,0,0,0,0,3,0,8,0],[7,0,0,0,6,4,9,2,0],[0,0,2,8,7,0,0,3,5],[0,0,7,3,8,2,0,0,0],[0,0,0,1,0,5,0,0,0],[0,0,0,6,9,7,2,0,0],[3,6,0,0,5,8,7,0,0],[0,1,5,7,2,0,0,0,9],[0,7,0,9,0,0,0,0,8]],\r\n                [[4,0,0,0,0,0,3,8,0],[0,0,7,0,6,0,2,4,0],[0,3,0,0,4,8,0,0,9],[0,0,8,7,0,9,6,1,3],[0,0,3,0,0,0,9,0,0],[7,9,5,6,0,3,4,0,0],[3,0,0,5,8,0,0,9,0],[0,1,9,0,3,0,5,0,0],[0,7,4,0,0,0,0,0,2]],\r\n                [[0,0,4,7,9,0,0,5,0],[0,0,5,0,0,3,8,0,7],[0,8,0,0,0,0,9,0,2],[8,0,2,0,6,0,5,0,3],[5,0,0,0,0,0,0,0,4],[6,0,7,0,4,0,1,0,8],[9,0,1,0,0,0,0,2,0],[2,0,8,3,0,0,4,0,0],[0,6,0,0,1,5,7,0,0]],\r\n                [[2,4,6,0,0,0,3,9,0],[9,5,0,0,0,0,0,0,0],[0,0,0,1,9,0,0,6,0],[0,2,0,9,4,0,6,8,0],[0,8,0,0,3,0,0,4,0],[0,7,3,0,2,8,0,5,0],[0,1,0,0,5,3,0,0,0],[0,0,0,0,0,0,0,1,5],[0,6,7,0,0,0,8,3,4]],\r\n                [[4,0,6,0,0,0,0,0,0],[0,0,0,7,0,0,5,0,3],[0,9,0,3,0,0,2,0,8],[6,0,7,0,2,3,8,5,0],[8,0,3,5,0,9,6,0,4],[0,5,4,6,1,0,7,0,2],[1,0,9,0,0,6,0,7,0],[5,0,8,0,0,7,0,0,0],[0,0,0,0,0,0,9,0,6]],\r\n            ],\r\n            puzzleMedium: [\r\n                [[0,0,0,8,4,7,6,0,3],[5,0,0,0,0,0,0,0,0],[0,0,3,2,0,0,0,0,7],[0,0,9,1,7,0,8,0,0],[0,1,0,0,8,0,0,9,0],[0,0,4,0,2,9,3,0,0],[8,0,0,0,0,2,9,0,0],[0,0,0,0,0,0,0,0,2],[3,0,2,7,5,6,0,0,0]],\r\n                [[0,7,0,0,3,1,0,0,8],[0,0,0,0,8,9,0,4,6],[0,0,0,7,0,0,1,0,0],[2,9,5,0,0,0,0,0,0],[3,0,0,0,0,0,0,0,4],[0,0,0,0,0,0,3,7,9],[0,0,3,0,0,8,0,0,0],[7,4,0,1,5,0,0,0,0],[5,0,0,6,9,0,0,2,0]],\r\n                [[4,0,0,8,0,0,0,3,0],[2,0,0,0,0,0,0,0,5],[0,0,7,9,0,5,8,0,0],[0,4,0,0,0,8,1,0,7],[7,0,3,0,0,0,6,0,9],[9,0,2,1,0,0,0,5,0],[0,0,1,2,0,6,5,0,0],[5,0,0,0,0,0,0,0,1],[0,2,0,0,0,9,0,0,8]],\r\n                [[0,9,0,0,3,0,0,0,0],[0,0,0,0,0,7,6,5,4],[8,0,0,0,0,0,0,0,9],[0,0,9,3,8,0,0,4,7],[7,0,8,0,0,0,2,0,5],[1,4,0,0,7,5,9,0,0],[4,0,0,0,0,0,0,0,1],[5,2,1,7,0,0,0,0,0],[0,0,0,0,4,0,0,8,0]],\r\n                [[0,0,2,0,0,5,0,0,9],[1,3,7,0,0,6,0,0,0],[5,0,9,0,0,3,1,0,0],[8,0,0,1,0,0,0,9,2],[0,0,0,0,0,0,0,0,0],[9,7,0,0,0,2,0,0,4],[0,0,1,4,0,0,6,0,7],[0,0,0,3,0,0,4,5,1],[6,0,0,7,0,0,9,0,0]],\r\n                [[0,0,0,0,1,0,0,6,4],[0,0,0,0,0,5,0,0,0],[0,1,0,9,0,0,5,0,3],[1,7,0,0,9,0,2,0,6],[0,9,0,5,2,4,0,1,0],[5,0,2,0,7,0,0,4,9],[3,0,5,0,0,6,0,9,0],[0,0,0,4,0,0,0,0,0],[7,8,0,0,3,0,0,0,0]],\r\n                [[7,0,0,8,0,0,1,3,0],[0,0,0,7,0,4,0,0,8],[0,0,0,0,2,0,0,7,5],[0,0,3,0,4,7,0,9,0],[4,0,0,0,0,0,0,0,1],[0,6,0,3,9,0,5,0,0],[9,7,0,0,3,0,0,0,0],[5,0,0,1,0,9,0,0,0],[0,8,2,0,0,6,0,0,9]],\r\n                [[9,0,0,5,1,0,0,2,0],[0,0,1,0,3,0,0,4,7],[0,0,0,4,8,0,0,1,0],[0,4,0,3,0,0,5,8,0],[0,9,0,0,0,0,0,7,0],[0,7,3,0,0,8,0,6,0],[0,1,0,0,9,3,0,0,0],[7,2,0,0,5,0,1,0,0],[0,3,0,0,2,1,0,0,8]],\r\n                [[3,0,1,0,0,8,0,7,0],[0,0,0,0,0,7,9,0,2],[0,2,0,0,4,0,0,0,0],[0,4,9,0,0,0,5,6,8],[0,0,0,2,5,9,0,0,0],[5,7,3,0,0,0,1,2,0],[0,0,0,0,3,0,0,1,0],[4,0,2,7,0,0,0,0,0],[0,6,0,5,0,0,7,0,3]],\r\n                [[5,0,0,0,3,0,0,0,2],[0,0,0,8,0,1,6,0,0],[8,0,0,6,0,5,0,0,1],[0,4,2,0,0,0,0,6,7],[0,8,0,0,0,0,0,9,0],[1,5,0,0,0,0,8,2,0],[6,0,0,5,0,2,0,0,9],[0,0,5,7,0,3,0,0,0],[3,0,0,0,1,0,0,0,6]],\r\n            ],\r\n            puzzleHard: [\r\n                [[0,0,0,0,6,4,0,0,0],[0,8,0,2,0,0,0,0,5],[6,0,7,0,0,5,0,2,0],[3,9,8,7,0,0,0,0,0],[0,5,0,0,0,0,0,1,0],[0,0,0,0,0,2,8,3,9],[0,3,0,9,0,0,5,0,6],[5,0,0,0,0,7,0,9,0],[0,0,0,5,4,0,0,0,0]],\r\n                [[0,0,0,5,9,7,2,6,0],[0,0,8,0,0,0,5,4,0],[0,0,0,0,0,0,0,0,9],[0,0,0,8,0,0,3,0,5],[0,0,0,1,3,4,0,0,0],[6,0,9,0,0,5,0,0,0],[2,0,0,0,0,0,0,0,0],[0,9,1,0,0,0,8,0,0],[0,6,3,4,5,2,0,0,0]],\r\n                [[0,0,0,7,0,1,0,4,5],[5,0,3,0,0,0,0,0,6],[7,0,0,0,5,0,0,0,0],[0,4,0,0,0,9,3,0,0],[2,0,0,0,0,0,0,0,4],[0,0,7,5,0,0,0,6,0],[0,0,0,0,8,0,0,0,2],[6,0,0,0,0,0,5,0,8],[8,2,0,3,0,5,0,0,0]],\r\n                [[0,0,0,0,7,0,0,0,9],[0,7,0,4,0,0,0,8,0],[4,5,8,0,0,0,0,0,0],[0,4,0,0,5,7,0,0,0],[0,0,7,9,0,3,8,0,0],[0,0,0,6,1,0,0,4,0],[0,0,0,0,0,0,5,6,1],[0,9,0,0,0,2,0,7,0],[6,0,0,0,8,0,0,0,0]],\r\n                [[0,0,9,5,0,0,6,0,3],[0,3,0,0,7,0,1,0,0],[5,0,0,1,0,0,0,0,0],[0,0,0,4,5,8,0,9,0],[2,0,0,0,0,0,0,0,4],[0,4,0,2,3,9,0,0,0],[0,0,0,0,0,5,0,0,1],[0,0,3,0,2,0,0,8,0],[9,0,8,0,0,4,5,0,0]],\r\n                [[0,0,0,0,0,1,0,7,0],[1,0,0,0,0,0,8,9,0],[0,0,8,6,0,3,0,0,1],[3,0,7,0,0,0,0,0,0],[9,0,5,3,0,7,1,0,8],[0,0,0,0,0,0,7,0,9],[7,0,0,9,0,5,6,0,0],[0,4,9,0,0,0,0,0,7],[0,2,0,1,0,0,0,0,0]],\r\n                [[0,0,0,0,0,3,9,4,7],[0,0,0,9,2,0,8,3,0],[9,0,0,0,0,0,0,0,0],[4,5,0,0,0,2,0,0,0],[1,8,0,0,0,0,0,7,4],[0,0,0,1,0,0,0,5,3],[0,0,0,0,0,0,0,0,1],[0,1,2,0,7,8,0,0,0],[5,7,9,2,0,0,0,0,0]],\r\n                [[0,0,0,0,0,0,0,8,0],[0,0,0,6,0,7,3,0,9],[2,9,3,0,5,0,0,0,0],[0,5,0,0,0,0,7,0,4],[0,2,0,0,3,0,0,9,0],[1,0,4,0,0,0,0,2,0],[0,0,0,0,4,0,6,3,2],[6,0,5,2,0,9,0,0,0],[0,7,0,0,0,0,0,0,0]],\r\n                [[0,8,0,0,0,5,4,0,0],[0,0,0,0,0,0,0,0,0],[0,1,5,4,0,6,2,9,0],[0,0,7,6,5,0,0,0,1],[1,0,0,0,0,0,0,0,3],[4,0,0,0,3,1,5,0,0],[0,6,3,5,0,4,1,8,0],[0,0,0,0,0,0,0,0,0],[0,0,4,3,0,0,0,6,0]],\r\n                [[0,3,0,0,0,5,0,8,0],[5,0,0,0,3,2,0,0,0],[0,0,7,9,4,0,2,0,0],[0,7,4,0,0,0,0,9,0],[0,0,0,0,1,0,0,0,0],[0,1,0,0,0,0,3,6,0],[0,0,6,0,2,4,8,0,0],[0,0,0,3,7,0,0,0,5],[0,5,0,8,0,0,0,3,0]],\r\n            ],\r\n            puzzleEvil: [\r\n                [[8,0,0,0,0,9,6,7,0],[0,7,0,0,0,0,0,8,0],[0,0,0,7,0,3,0,0,0],[0,0,7,1,0,0,3,0,0],[0,3,4,0,0,0,9,6,0],[0,0,8,0,0,5,1,0,0],[0,0,0,4,0,7,0,0,0],[0,2,0,0,0,0,0,1,0],[0,4,5,2,0,0,0,0,6]],\r\n                [[9,0,0,0,0,8,0,0,0],[6,0,0,9,7,0,0,4,0],[0,0,1,0,4,6,0,0,0],[0,8,0,0,0,0,9,0,5],[3,0,0,0,0,0,0,0,7],[7,0,2,0,0,0,0,1,0],[0,0,0,3,6,0,7,0,0],[0,1,0,0,9,7,0,0,8],[0,0,0,1,0,0,0,0,4]],\r\n                [[9,2,0,0,0,0,0,0,0],[0,4,0,1,7,0,0,0,0],[0,0,0,9,0,0,3,0,8],[0,8,0,0,0,3,5,0,2],[0,0,5,0,0,0,9,0,0],[2,0,3,5,0,0,0,6,0],[7,0,1,0,0,4,0,0,0],[0,0,0,0,6,1,0,2,0],[0,0,0,0,0,0,0,8,1]],\r\n                [[1,8,4,0,0,9,0,0,0],[0,0,3,0,8,0,0,0,0],[0,0,6,4,0,0,0,0,0],[8,0,0,5,0,0,0,0,1],[3,0,0,0,7,0,0,0,5],[7,0,0,0,0,6,0,0,3],[0,0,0,0,0,1,2,0,0],[0,0,0,0,4,0,9,0,0],[0,0,0,2,0,0,1,7,8]],\r\n                [[8,4,0,0,0,2,0,0,0],[0,0,6,0,0,8,0,0,0],[5,0,7,9,0,0,4,0,0],[2,0,0,0,5,0,0,0,0],[0,3,0,7,0,4,0,6,0],[0,0,0,0,8,0,0,0,2],[0,0,8,0,0,5,9,0,1],[0,0,0,8,0,0,2,0,0],[0,0,0,1,0,0,0,5,6]],\r\n                [[1,4,0,8,0,0,0,0,0],[0,8,0,3,0,0,0,4,0],[0,0,0,0,9,1,8,5,0],[0,0,0,0,0,0,0,3,0],[6,0,0,1,0,8,0,0,4],[0,2,0,0,0,0,0,0,0],[0,6,3,7,4,0,0,0,0],[0,1,0,0,0,5,0,2,0],[0,0,0,0,0,3,0,7,8]],\r\n                [[1,0,0,0,0,0,0,0,0],[0,0,0,3,0,8,6,0,7],[0,2,0,0,0,4,5,0,0],[0,3,0,0,7,0,2,6,0],[7,0,0,0,0,0,0,0,5],[0,5,2,0,9,0,0,8,0],[0,0,8,6,0,0,0,4,0],[2,0,5,8,0,1,0,0,0],[0,0,0,0,0,0,0,0,6]],\r\n                [[7,0,0,0,0,3,0,4,1],[0,2,0,7,4,0,0,9,0],[0,0,0,0,0,0,0,0,0],[9,0,0,0,5,8,0,1,0],[6,0,0,0,0,0,0,0,5],[0,4,0,3,6,0,0,0,8],[0,0,0,0,0,0,0,0,0],[0,1,0,0,3,2,0,5,0],[3,8,0,9,0,0,0,0,4]],\r\n                [[0,0,5,2,0,0,9,6,0],[7,1,0,0,0,0,0,3,0],[0,0,0,4,0,0,0,0,0],[9,0,2,6,0,0,0,0,0],[0,0,0,1,9,8,0,0,0],[0,0,0,0,0,2,4,0,7],[0,0,0,0,0,6,0,0,0],[0,5,0,0,0,0,0,4,8],[0,2,8,0,0,5,1,0,0]],\r\n                [[0,6,0,8,0,0,0,2,0],[5,0,0,3,0,0,0,1,0],[1,0,0,0,2,0,5,0,0],[0,9,1,0,7,0,0,0,0],[8,0,0,0,0,0,0,0,7],[0,0,0,0,4,0,3,8,0],[0,0,2,0,8,0,0,0,5],[0,1,0,0,0,9,0,0,3],[0,3,0,0,0,4,0,6,0]],\r\n            ],\r\n            puzzleMultiple: [\r\n                [[0,0,0,6,0,0,5,0,0],[0,3,0,0,0,4,0,2,0],[0,0,9,0,2,3,0,0,8],[7,0,0,0,0,0,0,0,0],[0,0,1,8,0,6,3,0,0],[0,0,0,0,0,0,0,0,7],[5,0,6,3,9,0,1,0,0],[0,7,0,4,0,0,0,5,0],[0,0,4,0,0,5,0,0,0]],\r\n            ]\r\n        };\r\n        const puzzle = this.state.puzzleEasy[0];\r\n        this.state.puzzle = copySudoku(puzzle);\r\n        this.state.puzzleReset = copySudoku(puzzle);\r\n        this.state.removedCandidates = getEmptyRemovedcandidates();\r\n    }\r\n\r\n    changeCell(row, column, value){\r\n        var newPuzzle = copySudoku(this.state.puzzle);\r\n        newPuzzle[row][column] = value;\r\n        this.setState({puzzle: newPuzzle});\r\n    }\r\n\r\n    changeRemoveCandidates(row, column, value){\r\n        var newRemovedCandidates = this.state.removedCandidates.map((row) => row.slice());\r\n        if (newRemovedCandidates[row][column].indexOf(value) === -1) {\r\n            newRemovedCandidates[row][column].push(value);\r\n        } else {\r\n            newRemovedCandidates[row][column] = newRemovedCandidates[row][column].filter(val => val !== value)\r\n        }\r\n        this.setState({removedCandidates: newRemovedCandidates});\r\n    }\r\n\r\n    solveOnce(){\r\n        var solve = solveOnce(this.state.puzzle);\r\n        this.setState({\r\n            puzzle: solve.sudoku,\r\n            candidateGrid: solve.candidateGrid\r\n        });\r\n    }\r\n\r\n    resetPuzzle(){\r\n        this.setState({\r\n            puzzle: copySudoku(this.state.puzzleReset),\r\n            candidateGrid: null,\r\n            removedCandidates: getEmptyRemovedcandidates()\r\n        });\r\n    }\r\n\r\n    renderSolved(){\r\n        if (isSolved(this.state.puzzle)){\r\n            return (<h2>Solved!</h2>);\r\n        } else {\r\n            return (<h2>Solving...</h2>);\r\n        }\r\n    }\r\n\r\n    clearPuzzle(){\r\n        this.setState({\r\n            puzzle: getEmptySudoku(),\r\n            puzzleReset: getEmptySudoku(),\r\n            removedCandidates: getEmptyRemovedcandidates()\r\n        });\r\n    }\r\n\r\n    printPuzzle(){\r\n        console.log(this.state.puzzle);\r\n    }\r\n\r\n    changePuzzle(puzzle){\r\n        this.setState({\r\n            puzzle: copySudoku(puzzle),\r\n            puzzleReset: copySudoku(puzzle),\r\n            removedCandidates: getEmptyRemovedcandidates()\r\n        });\r\n    }\r\n\r\n    renderSudokuCell(row, column, value, disable=false) {\r\n        // const candidates = [...this.state.candidateGrid[row][column]]\r\n        const candidates = getCandidates(this.state.puzzle, row, column);\r\n        if (false) {\r\n            return (<SudokuCell value={value} candidates={candidates} onClick={value => {}}/>);\r\n        } else {\r\n            return (<SudokuCell value={value} candidates={candidates}\r\n                removedCandidates={this.state.removedCandidates[row][column]}\r\n                onClick={value =>{this.changeCell(row, column, value)}}\r\n                onContextMenu={value =>{this.changeRemoveCandidates(row, column, value);}}\r\n                />);\r\n        }\r\n    }\r\n\r\n    renderPuzzleList(){\r\n        var puzzles = [\r\n            ['Easy', this.state.puzzleEasy],\r\n            ['Medium', this.state.puzzleMedium],\r\n            ['Hard', this.state.puzzleHard],\r\n            ['Very Hard', this.state.puzzleEvil],\r\n            // ['Multiple', this.state.puzzleMultiple],\r\n        ].map((puzzleInfo) =>(\r\n            <Table.Row>\r\n                <Table.Cell>{puzzleInfo[0]}</Table.Cell>\r\n                {puzzleInfo[1].map((puzzle, index) => (\r\n                    <Table.Cell key={puzzleInfo[0] + index} onClick={()=>this.changePuzzle(puzzle)}>\r\n                        {index + 1}\r\n                    </Table.Cell>))}\r\n            </Table.Row>\r\n        ));\r\n\r\n    //     <Table.Body>\r\n    //     <Table.Row>\r\n    //       <Table.Cell>\r\n    //         <Label ribbon>First</Label>\r\n    //       </Table.Cell>\r\n    //       <Table.Cell>Cell</Table.Cell>\r\n    //       <Table.Cell>Cell</Table.Cell>\r\n    //     </Table.Row>\r\n    //     <Table.Row>\r\n    //       <Table.Cell>Cell</Table.Cell>\r\n    //       <Table.Cell>Cell</Table.Cell>\r\n    //       <Table.Cell>Cell</Table.Cell>\r\n    //     </Table.Row>\r\n    //     <Table.Row>\r\n    //       <Table.Cell>Cell</Table.Cell>\r\n    //       <Table.Cell>Cell</Table.Cell>\r\n    //       <Table.Cell>Cell</Table.Cell>\r\n    //     </Table.Row>\r\n    //   </Table.Body>\r\n\r\n        let table = (<Table celled><Table.Body>{puzzles}</Table.Body></Table>);\r\n        // console.log(easy);\r\n        return table;\r\n    }\r\n\r\n    render() {\r\n        const rows = this.state.puzzle.map((row, rIndex) => {\r\n            const cells = row.map((cell, cIndex) => {\r\n                const originalCellValue = this.state.puzzleReset[rIndex][cIndex];\r\n                if (originalCellValue !== 0) {\r\n                    return (<td className='default' key={'cell-' + rIndex + '-' + cIndex}>{this.renderSudokuCell(rIndex, cIndex, cell, originalCellValue!==0)}</td>);\r\n                }\r\n                return (<td key={'cell-' + rIndex + '-' + cIndex}>{this.renderSudokuCell(rIndex, cIndex, cell, originalCellValue!==0)}</td>);\r\n            });\r\n            return (<tr key={'row-' + rIndex.toString()}>{cells}</tr>);\r\n        })\r\n\r\n        return (\r\n            <div>\r\n                <div className='solved-bar'>\r\n                    {this.renderSolved()}\r\n                </div>\r\n                <table className='sudoku-board'>\r\n                    <tbody>\r\n                        {rows}\r\n                    </tbody>\r\n                </table>\r\n                <div className='button-bar'>\r\n                    <button onClick={()=>{this.solveOnce()}}>Solve</button>\r\n                    <button onClick={()=>{this.resetPuzzle()}}>Reset</button>\r\n                    <button onClick={()=>{this.clearPuzzle()}}>Clear</button>\r\n                    <button onClick={()=>{this.printPuzzle()}}>Print</button>\r\n                </div>\r\n                <div>\r\n                    {this.renderPuzzleList()}\r\n                </div>\r\n            </div>\r\n        );\r\n  }\r\n}\r\n\r\nexport default SudokuBoard;\r\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nimport SudokuBoard from \"./Sudoku/SudokuBoard\";\nimport { Container } from 'semantic-ui-react'\n\nclass App extends Component {\n  render() {\n    return (\n      <Container>\n        <SudokuBoard/>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}