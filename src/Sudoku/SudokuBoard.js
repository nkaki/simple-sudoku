import React, { Component } from 'react';
import SudokuCell from "./SudokuCell";
import {getCandidates, solveOnce, getEmptySudoku, copySudoku, isSolved, getEmptyRemovedcandidates} from "./SudokuSolver"
import './SudokuBoard.css';

import { Table } from 'semantic-ui-react'


class SudokuBoard extends Component {
    constructor(props) {
        super(props);
        this.state = {
            puzzleEasy: [
                [[7,8,0,0,1,0,6,5,0],[0,0,0,0,0,0,4,0,0],[0,3,4,0,0,5,0,0,8],[9,0,0,0,3,4,0,8,1],[6,0,3,0,0,0,9,0,5],[4,1,0,7,5,0,0,0,3],[8,0,0,3,0,0,5,2,0],[0,0,7,0,0,0,0,0,0],[0,9,5,0,7,0,0,1,4]],
                [[7,0,6,3,2,0,9,0,0],[0,1,0,0,7,0,0,0,4],[0,0,4,0,0,0,7,8,2],[4,0,0,7,5,1,0,0,0],[0,0,1,9,0,2,4,0,0],[0,0,0,4,8,3,0,0,7],[9,2,3,0,0,0,8,0,0],[8,0,0,0,3,0,0,4,0],[0,0,7,0,9,5,6,0,3]],
                [[9,0,0,0,7,1,0,2,0],[2,0,8,0,0,4,0,7,0],[0,0,3,0,0,0,5,8,0],[0,4,5,0,3,2,1,6,9],[0,0,0,0,0,0,0,0,0],[3,7,6,1,8,0,4,5,0],[0,2,1,0,0,0,7,0,0],[0,3,0,5,0,0,6,0,8],[0,8,0,4,1,0,0,0,5]],
                [[7,0,1,0,8,0,0,0,4],[0,0,0,0,0,0,0,0,7],[8,0,0,0,9,5,2,0,6],[9,0,0,6,3,0,1,8,5],[0,1,0,2,0,7,0,4,0],[5,4,3,0,1,8,0,0,2],[1,0,2,4,7,0,0,0,8],[3,0,0,0,0,0,0,0,0],[4,0,0,0,2,0,3,0,1]],
                [[7,5,0,0,8,0,0,0,2],[0,1,6,9,0,7,4,5,0],[3,2,0,1,0,0,0,6,0],[0,0,8,0,0,1,2,0,0],[0,6,0,0,0,0,0,8,0],[0,0,7,2,0,0,3,0,0],[0,7,0,0,0,2,0,3,4],[0,4,5,7,0,3,8,2,0],[2,0,0,0,9,0,0,7,5]],
                [[5,0,0,0,0,3,0,8,0],[7,0,0,0,6,4,9,2,0],[0,0,2,8,7,0,0,3,5],[0,0,7,3,8,2,0,0,0],[0,0,0,1,0,5,0,0,0],[0,0,0,6,9,7,2,0,0],[3,6,0,0,5,8,7,0,0],[0,1,5,7,2,0,0,0,9],[0,7,0,9,0,0,0,0,8]],
                [[4,0,0,0,0,0,3,8,0],[0,0,7,0,6,0,2,4,0],[0,3,0,0,4,8,0,0,9],[0,0,8,7,0,9,6,1,3],[0,0,3,0,0,0,9,0,0],[7,9,5,6,0,3,4,0,0],[3,0,0,5,8,0,0,9,0],[0,1,9,0,3,0,5,0,0],[0,7,4,0,0,0,0,0,2]],
                [[0,0,4,7,9,0,0,5,0],[0,0,5,0,0,3,8,0,7],[0,8,0,0,0,0,9,0,2],[8,0,2,0,6,0,5,0,3],[5,0,0,0,0,0,0,0,4],[6,0,7,0,4,0,1,0,8],[9,0,1,0,0,0,0,2,0],[2,0,8,3,0,0,4,0,0],[0,6,0,0,1,5,7,0,0]],
                [[2,4,6,0,0,0,3,9,0],[9,5,0,0,0,0,0,0,0],[0,0,0,1,9,0,0,6,0],[0,2,0,9,4,0,6,8,0],[0,8,0,0,3,0,0,4,0],[0,7,3,0,2,8,0,5,0],[0,1,0,0,5,3,0,0,0],[0,0,0,0,0,0,0,1,5],[0,6,7,0,0,0,8,3,4]],
                [[4,0,6,0,0,0,0,0,0],[0,0,0,7,0,0,5,0,3],[0,9,0,3,0,0,2,0,8],[6,0,7,0,2,3,8,5,0],[8,0,3,5,0,9,6,0,4],[0,5,4,6,1,0,7,0,2],[1,0,9,0,0,6,0,7,0],[5,0,8,0,0,7,0,0,0],[0,0,0,0,0,0,9,0,6]],
            ],
            puzzleMedium: [
                [[0,0,0,8,4,7,6,0,3],[5,0,0,0,0,0,0,0,0],[0,0,3,2,0,0,0,0,7],[0,0,9,1,7,0,8,0,0],[0,1,0,0,8,0,0,9,0],[0,0,4,0,2,9,3,0,0],[8,0,0,0,0,2,9,0,0],[0,0,0,0,0,0,0,0,2],[3,0,2,7,5,6,0,0,0]],
                [[0,7,0,0,3,1,0,0,8],[0,0,0,0,8,9,0,4,6],[0,0,0,7,0,0,1,0,0],[2,9,5,0,0,0,0,0,0],[3,0,0,0,0,0,0,0,4],[0,0,0,0,0,0,3,7,9],[0,0,3,0,0,8,0,0,0],[7,4,0,1,5,0,0,0,0],[5,0,0,6,9,0,0,2,0]],
                [[4,0,0,8,0,0,0,3,0],[2,0,0,0,0,0,0,0,5],[0,0,7,9,0,5,8,0,0],[0,4,0,0,0,8,1,0,7],[7,0,3,0,0,0,6,0,9],[9,0,2,1,0,0,0,5,0],[0,0,1,2,0,6,5,0,0],[5,0,0,0,0,0,0,0,1],[0,2,0,0,0,9,0,0,8]],
                [[0,9,0,0,3,0,0,0,0],[0,0,0,0,0,7,6,5,4],[8,0,0,0,0,0,0,0,9],[0,0,9,3,8,0,0,4,7],[7,0,8,0,0,0,2,0,5],[1,4,0,0,7,5,9,0,0],[4,0,0,0,0,0,0,0,1],[5,2,1,7,0,0,0,0,0],[0,0,0,0,4,0,0,8,0]],
                [[0,0,2,0,0,5,0,0,9],[1,3,7,0,0,6,0,0,0],[5,0,9,0,0,3,1,0,0],[8,0,0,1,0,0,0,9,2],[0,0,0,0,0,0,0,0,0],[9,7,0,0,0,2,0,0,4],[0,0,1,4,0,0,6,0,7],[0,0,0,3,0,0,4,5,1],[6,0,0,7,0,0,9,0,0]],
                [[0,0,0,0,1,0,0,6,4],[0,0,0,0,0,5,0,0,0],[0,1,0,9,0,0,5,0,3],[1,7,0,0,9,0,2,0,6],[0,9,0,5,2,4,0,1,0],[5,0,2,0,7,0,0,4,9],[3,0,5,0,0,6,0,9,0],[0,0,0,4,0,0,0,0,0],[7,8,0,0,3,0,0,0,0]],
                [[7,0,0,8,0,0,1,3,0],[0,0,0,7,0,4,0,0,8],[0,0,0,0,2,0,0,7,5],[0,0,3,0,4,7,0,9,0],[4,0,0,0,0,0,0,0,1],[0,6,0,3,9,0,5,0,0],[9,7,0,0,3,0,0,0,0],[5,0,0,1,0,9,0,0,0],[0,8,2,0,0,6,0,0,9]],
                [[9,0,0,5,1,0,0,2,0],[0,0,1,0,3,0,0,4,7],[0,0,0,4,8,0,0,1,0],[0,4,0,3,0,0,5,8,0],[0,9,0,0,0,0,0,7,0],[0,7,3,0,0,8,0,6,0],[0,1,0,0,9,3,0,0,0],[7,2,0,0,5,0,1,0,0],[0,3,0,0,2,1,0,0,8]],
                [[3,0,1,0,0,8,0,7,0],[0,0,0,0,0,7,9,0,2],[0,2,0,0,4,0,0,0,0],[0,4,9,0,0,0,5,6,8],[0,0,0,2,5,9,0,0,0],[5,7,3,0,0,0,1,2,0],[0,0,0,0,3,0,0,1,0],[4,0,2,7,0,0,0,0,0],[0,6,0,5,0,0,7,0,3]],
                [[5,0,0,0,3,0,0,0,2],[0,0,0,8,0,1,6,0,0],[8,0,0,6,0,5,0,0,1],[0,4,2,0,0,0,0,6,7],[0,8,0,0,0,0,0,9,0],[1,5,0,0,0,0,8,2,0],[6,0,0,5,0,2,0,0,9],[0,0,5,7,0,3,0,0,0],[3,0,0,0,1,0,0,0,6]],
            ],
            puzzleHard: [
                [[0,0,0,0,6,4,0,0,0],[0,8,0,2,0,0,0,0,5],[6,0,7,0,0,5,0,2,0],[3,9,8,7,0,0,0,0,0],[0,5,0,0,0,0,0,1,0],[0,0,0,0,0,2,8,3,9],[0,3,0,9,0,0,5,0,6],[5,0,0,0,0,7,0,9,0],[0,0,0,5,4,0,0,0,0]],
                [[0,0,0,5,9,7,2,6,0],[0,0,8,0,0,0,5,4,0],[0,0,0,0,0,0,0,0,9],[0,0,0,8,0,0,3,0,5],[0,0,0,1,3,4,0,0,0],[6,0,9,0,0,5,0,0,0],[2,0,0,0,0,0,0,0,0],[0,9,1,0,0,0,8,0,0],[0,6,3,4,5,2,0,0,0]],
                [[0,0,0,7,0,1,0,4,5],[5,0,3,0,0,0,0,0,6],[7,0,0,0,5,0,0,0,0],[0,4,0,0,0,9,3,0,0],[2,0,0,0,0,0,0,0,4],[0,0,7,5,0,0,0,6,0],[0,0,0,0,8,0,0,0,2],[6,0,0,0,0,0,5,0,8],[8,2,0,3,0,5,0,0,0]],
                [[0,0,0,0,7,0,0,0,9],[0,7,0,4,0,0,0,8,0],[4,5,8,0,0,0,0,0,0],[0,4,0,0,5,7,0,0,0],[0,0,7,9,0,3,8,0,0],[0,0,0,6,1,0,0,4,0],[0,0,0,0,0,0,5,6,1],[0,9,0,0,0,2,0,7,0],[6,0,0,0,8,0,0,0,0]],
                [[0,0,9,5,0,0,6,0,3],[0,3,0,0,7,0,1,0,0],[5,0,0,1,0,0,0,0,0],[0,0,0,4,5,8,0,9,0],[2,0,0,0,0,0,0,0,4],[0,4,0,2,3,9,0,0,0],[0,0,0,0,0,5,0,0,1],[0,0,3,0,2,0,0,8,0],[9,0,8,0,0,4,5,0,0]],
                [[0,0,0,0,0,1,0,7,0],[1,0,0,0,0,0,8,9,0],[0,0,8,6,0,3,0,0,1],[3,0,7,0,0,0,0,0,0],[9,0,5,3,0,7,1,0,8],[0,0,0,0,0,0,7,0,9],[7,0,0,9,0,5,6,0,0],[0,4,9,0,0,0,0,0,7],[0,2,0,1,0,0,0,0,0]],
                [[0,0,0,0,0,3,9,4,7],[0,0,0,9,2,0,8,3,0],[9,0,0,0,0,0,0,0,0],[4,5,0,0,0,2,0,0,0],[1,8,0,0,0,0,0,7,4],[0,0,0,1,0,0,0,5,3],[0,0,0,0,0,0,0,0,1],[0,1,2,0,7,8,0,0,0],[5,7,9,2,0,0,0,0,0]],
                [[0,0,0,0,0,0,0,8,0],[0,0,0,6,0,7,3,0,9],[2,9,3,0,5,0,0,0,0],[0,5,0,0,0,0,7,0,4],[0,2,0,0,3,0,0,9,0],[1,0,4,0,0,0,0,2,0],[0,0,0,0,4,0,6,3,2],[6,0,5,2,0,9,0,0,0],[0,7,0,0,0,0,0,0,0]],
                [[0,8,0,0,0,5,4,0,0],[0,0,0,0,0,0,0,0,0],[0,1,5,4,0,6,2,9,0],[0,0,7,6,5,0,0,0,1],[1,0,0,0,0,0,0,0,3],[4,0,0,0,3,1,5,0,0],[0,6,3,5,0,4,1,8,0],[0,0,0,0,0,0,0,0,0],[0,0,4,3,0,0,0,6,0]],
                [[0,3,0,0,0,5,0,8,0],[5,0,0,0,3,2,0,0,0],[0,0,7,9,4,0,2,0,0],[0,7,4,0,0,0,0,9,0],[0,0,0,0,1,0,0,0,0],[0,1,0,0,0,0,3,6,0],[0,0,6,0,2,4,8,0,0],[0,0,0,3,7,0,0,0,5],[0,5,0,8,0,0,0,3,0]],
            ],
            puzzleEvil: [
                [[8,0,0,0,0,9,6,7,0],[0,7,0,0,0,0,0,8,0],[0,0,0,7,0,3,0,0,0],[0,0,7,1,0,0,3,0,0],[0,3,4,0,0,0,9,6,0],[0,0,8,0,0,5,1,0,0],[0,0,0,4,0,7,0,0,0],[0,2,0,0,0,0,0,1,0],[0,4,5,2,0,0,0,0,6]],
                [[9,0,0,0,0,8,0,0,0],[6,0,0,9,7,0,0,4,0],[0,0,1,0,4,6,0,0,0],[0,8,0,0,0,0,9,0,5],[3,0,0,0,0,0,0,0,7],[7,0,2,0,0,0,0,1,0],[0,0,0,3,6,0,7,0,0],[0,1,0,0,9,7,0,0,8],[0,0,0,1,0,0,0,0,4]],
                [[9,2,0,0,0,0,0,0,0],[0,4,0,1,7,0,0,0,0],[0,0,0,9,0,0,3,0,8],[0,8,0,0,0,3,5,0,2],[0,0,5,0,0,0,9,0,0],[2,0,3,5,0,0,0,6,0],[7,0,1,0,0,4,0,0,0],[0,0,0,0,6,1,0,2,0],[0,0,0,0,0,0,0,8,1]],
                [[1,8,4,0,0,9,0,0,0],[0,0,3,0,8,0,0,0,0],[0,0,6,4,0,0,0,0,0],[8,0,0,5,0,0,0,0,1],[3,0,0,0,7,0,0,0,5],[7,0,0,0,0,6,0,0,3],[0,0,0,0,0,1,2,0,0],[0,0,0,0,4,0,9,0,0],[0,0,0,2,0,0,1,7,8]],
                [[8,4,0,0,0,2,0,0,0],[0,0,6,0,0,8,0,0,0],[5,0,7,9,0,0,4,0,0],[2,0,0,0,5,0,0,0,0],[0,3,0,7,0,4,0,6,0],[0,0,0,0,8,0,0,0,2],[0,0,8,0,0,5,9,0,1],[0,0,0,8,0,0,2,0,0],[0,0,0,1,0,0,0,5,6]],
                [[1,4,0,8,0,0,0,0,0],[0,8,0,3,0,0,0,4,0],[0,0,0,0,9,1,8,5,0],[0,0,0,0,0,0,0,3,0],[6,0,0,1,0,8,0,0,4],[0,2,0,0,0,0,0,0,0],[0,6,3,7,4,0,0,0,0],[0,1,0,0,0,5,0,2,0],[0,0,0,0,0,3,0,7,8]],
                [[1,0,0,0,0,0,0,0,0],[0,0,0,3,0,8,6,0,7],[0,2,0,0,0,4,5,0,0],[0,3,0,0,7,0,2,6,0],[7,0,0,0,0,0,0,0,5],[0,5,2,0,9,0,0,8,0],[0,0,8,6,0,0,0,4,0],[2,0,5,8,0,1,0,0,0],[0,0,0,0,0,0,0,0,6]],
                [[7,0,0,0,0,3,0,4,1],[0,2,0,7,4,0,0,9,0],[0,0,0,0,0,0,0,0,0],[9,0,0,0,5,8,0,1,0],[6,0,0,0,0,0,0,0,5],[0,4,0,3,6,0,0,0,8],[0,0,0,0,0,0,0,0,0],[0,1,0,0,3,2,0,5,0],[3,8,0,9,0,0,0,0,4]],
                [[0,0,5,2,0,0,9,6,0],[7,1,0,0,0,0,0,3,0],[0,0,0,4,0,0,0,0,0],[9,0,2,6,0,0,0,0,0],[0,0,0,1,9,8,0,0,0],[0,0,0,0,0,2,4,0,7],[0,0,0,0,0,6,0,0,0],[0,5,0,0,0,0,0,4,8],[0,2,8,0,0,5,1,0,0]],
                [[0,6,0,8,0,0,0,2,0],[5,0,0,3,0,0,0,1,0],[1,0,0,0,2,0,5,0,0],[0,9,1,0,7,0,0,0,0],[8,0,0,0,0,0,0,0,7],[0,0,0,0,4,0,3,8,0],[0,0,2,0,8,0,0,0,5],[0,1,0,0,0,9,0,0,3],[0,3,0,0,0,4,0,6,0]],
            ],
            puzzleMultiple: [
                [[0,0,0,6,0,0,5,0,0],[0,3,0,0,0,4,0,2,0],[0,0,9,0,2,3,0,0,8],[7,0,0,0,0,0,0,0,0],[0,0,1,8,0,6,3,0,0],[0,0,0,0,0,0,0,0,7],[5,0,6,3,9,0,1,0,0],[0,7,0,4,0,0,0,5,0],[0,0,4,0,0,5,0,0,0]],
            ]
        };
        const puzzle = this.state.puzzleEasy[0];
        this.state.puzzle = copySudoku(puzzle);
        this.state.puzzleReset = copySudoku(puzzle);
        this.state.removedCandidates = getEmptyRemovedcandidates();
    }

    changeCell(row, column, value){
        var newPuzzle = copySudoku(this.state.puzzle);
        newPuzzle[row][column] = value;
        this.setState({puzzle: newPuzzle});
    }

    changeRemoveCandidates(row, column, value){
        var newRemovedCandidates = this.state.removedCandidates.map((row) => row.slice());
        if (newRemovedCandidates[row][column].indexOf(value) === -1) {
            newRemovedCandidates[row][column].push(value);
        } else {
            newRemovedCandidates[row][column] = newRemovedCandidates[row][column].filter(val => val !== value)
        }
        this.setState({removedCandidates: newRemovedCandidates});
    }

    solveOnce(){
        var solve = solveOnce(this.state.puzzle);
        this.setState({
            puzzle: solve.sudoku,
            candidateGrid: solve.candidateGrid
        });
    }

    resetPuzzle(){
        this.setState({
            puzzle: copySudoku(this.state.puzzleReset),
            candidateGrid: null,
            removedCandidates: getEmptyRemovedcandidates()
        });
    }

    renderSolved(){
        if (isSolved(this.state.puzzle)){
            return (<h2>Solved!</h2>);
        } else {
            return (<h2>Solving...</h2>);
        }
    }

    clearPuzzle(){
        this.setState({
            puzzle: getEmptySudoku(),
            puzzleReset: getEmptySudoku(),
            removedCandidates: getEmptyRemovedcandidates()
        });
    }

    printPuzzle(){
        console.log(this.state.puzzle);
    }

    changePuzzle(puzzle){
        this.setState({
            puzzle: copySudoku(puzzle),
            puzzleReset: copySudoku(puzzle),
            removedCandidates: getEmptyRemovedcandidates()
        });
    }

    renderSudokuCell(row, column, value, disable=false) {
        // const candidates = [...this.state.candidateGrid[row][column]]
        const candidates = getCandidates(this.state.puzzle, row, column);
        if (false) {
            return (<SudokuCell value={value} candidates={candidates} onClick={value => {}}/>);
        } else {
            return (<SudokuCell value={value} candidates={candidates}
                removedCandidates={this.state.removedCandidates[row][column]}
                onClick={value =>{this.changeCell(row, column, value)}}
                onContextMenu={value =>{this.changeRemoveCandidates(row, column, value);}}
                />);
        }
    }

    renderPuzzleList(){
        var puzzles = [
            ['Easy', this.state.puzzleEasy],
            ['Medium', this.state.puzzleMedium],
            ['Hard', this.state.puzzleHard],
            ['Very Hard', this.state.puzzleEvil],
            // ['Multiple', this.state.puzzleMultiple],
        ].map((puzzleInfo) =>(
            <Table.Row>
                <Table.Cell>{puzzleInfo[0]}</Table.Cell>
                {puzzleInfo[1].map((puzzle, index) => (
                    <Table.Cell key={puzzleInfo[0] + index} onClick={()=>this.changePuzzle(puzzle)}>
                        {index + 1}
                    </Table.Cell>))}
            </Table.Row>
        ));

    //     <Table.Body>
    //     <Table.Row>
    //       <Table.Cell>
    //         <Label ribbon>First</Label>
    //       </Table.Cell>
    //       <Table.Cell>Cell</Table.Cell>
    //       <Table.Cell>Cell</Table.Cell>
    //     </Table.Row>
    //     <Table.Row>
    //       <Table.Cell>Cell</Table.Cell>
    //       <Table.Cell>Cell</Table.Cell>
    //       <Table.Cell>Cell</Table.Cell>
    //     </Table.Row>
    //     <Table.Row>
    //       <Table.Cell>Cell</Table.Cell>
    //       <Table.Cell>Cell</Table.Cell>
    //       <Table.Cell>Cell</Table.Cell>
    //     </Table.Row>
    //   </Table.Body>

        let table = (<Table celled><Table.Body>{puzzles}</Table.Body></Table>);
        // console.log(easy);
        return table;
    }

    render() {
        const rows = this.state.puzzle.map((row, rIndex) => {
            const cells = row.map((cell, cIndex) => {
                const originalCellValue = this.state.puzzleReset[rIndex][cIndex];
                if (originalCellValue !== 0) {
                    return (<td className='default' key={'cell-' + rIndex + '-' + cIndex}>{this.renderSudokuCell(rIndex, cIndex, cell, originalCellValue!==0)}</td>);
                }
                return (<td key={'cell-' + rIndex + '-' + cIndex}>{this.renderSudokuCell(rIndex, cIndex, cell, originalCellValue!==0)}</td>);
            });
            return (<tr key={'row-' + rIndex.toString()}>{cells}</tr>);
        })

        return (
            <div>
                <div className='solved-bar'>
                    {this.renderSolved()}
                </div>
                <table className='sudoku-board'>
                    <tbody>
                        {rows}
                    </tbody>
                </table>
                <div className='button-bar'>
                    <button onClick={()=>{this.solveOnce()}}>Solve</button>
                    <button onClick={()=>{this.resetPuzzle()}}>Reset</button>
                    <button onClick={()=>{this.clearPuzzle()}}>Clear</button>
                    <button onClick={()=>{this.printPuzzle()}}>Print</button>
                </div>
                <div>
                    {this.renderPuzzleList()}
                </div>
            </div>
        );
  }
}

export default SudokuBoard;
